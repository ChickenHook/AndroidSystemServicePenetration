package org.chickenhook.parcelexploittester

import android.os.Binder
import android.os.Parcel
import android.util.Log
import junit.framework.Assert.assertNotNull
import junit.framework.Assert.assertTrue
import org.junit.Test

fun ByteArray.toHexString(): String {
    return this.joinToString("") {
        java.lang.String.format("%02x", it)
    }
}


class BinderParcelExploit {

    @Test
    fun easyTest() {
        val binder = Binder();

        val parcel = Parcel.obtain()
        parcel.writeStrongBinder(binder)

        Log.d("BinderParcelExploit", "size <" + parcel.dataSize() + ">")
        val parcelContent: ByteArray = ByteArray(10)
        parcel.setDataPosition(0)
        Log.d(
            "BinderParcelExploit",
            "size2 <" + parcel.dataSize() + "> <" + parcel.dataPosition() + ">"
        )

        parcel.readByteArray(parcelContent)

        Log.d("BinderParcelExploit", "content <" + parcelContent.toHexString() + ">")

    }

    @Test(expected = OutOfMemoryError::class)
    fun createBinderArrayTest() {
        // https://cs.android.com/android/platform/superproject/+/master:frameworks/base/core/java/android/os/Parcel.java;l=1909?q=Parcel.java
        val parcel = Parcel.obtain()
        parcel.writeInt(0xfffffff)
        parcel.setDataPosition(0)
        val strings = parcel.createBinderArray()
        assertNotNull(strings)
        assertTrue(strings!!.isNotEmpty())
        Log.d("BinderParcelExploit", "String size <" + strings.size + ">")


    }

    @Test(expected = OutOfMemoryError::class)
    fun createStringArrayTest() {
        val parcel = Parcel.obtain()
        parcel.writeInt(0xfffffff)
        parcel.setDataPosition(0)
        val strings = parcel.createStringArray()
        assertNotNull(strings)
        assertTrue(strings!!.isNotEmpty())
        Log.d("BinderParcelExploit", "String size <" + strings.size + ">")
    }


    @Test(expected = OutOfMemoryError::class)
    fun createBinderArrayListTest() {
        // https://cs.android.com/android/platform/superproject/+/master:frameworks/base/core/java/android/os/Parcel.java;l=3441?q=Parcel.java
        val parcel = Parcel.obtain()
        parcel.writeInt(0xfffffff)
        parcel.setDataPosition(0)
        val strings = parcel.createBinderArrayList()
        assertNotNull(strings)
        Log.d("BinderParcelExploit", "String size <$strings>")

    }

    @Test(expected = OutOfMemoryError::class)
    fun createStringArrayListTest() {
        // https://cs.android.com/android/platform/superproject/+/master:frameworks/base/core/java/android/os/Parcel.java;l=3732;bpv=0;bpt=1
        val parcel = Parcel.obtain()
        parcel.writeInt(0xfffffff)
        parcel.setDataPosition(0)
        val strings = parcel.createStringArrayList()
        assertNotNull(strings)
        assertTrue(strings!!.isNotEmpty())
        Log.d("BinderParcelExploit", "String size <" + strings.size + ">")

    }

    @Test(expected = OutOfMemoryError::class)
    fun readArrayListIntern() {
        // https://cs.android.com/android/platform/superproject/+/master:frameworks/base/core/java/android/os/Parcel.java;drc=b0193ccac5b8399f9b5ef270d102b5a50f9446ab;l=5335?q=Parcel.java
        val parcel = Parcel.obtain()
        parcel.writeInt(0xfffffff)
        parcel.setDataPosition(0)
        val strings = parcel.readArrayList(Object::class.java.classLoader)
        assertNotNull(strings)
        assertTrue(strings!!.isNotEmpty())
        Log.d("BinderParcelExploit", "String size <" + strings.size + ">")

    }
// #define PAD_SIZE_UNSAFE(s) (((s) + 3) & ~3UL)
    @Test
    fun readString16Test() {
        // https://cs.android.com/android/platform/superproject/+/master:frameworks/native/libs/binder/Parcel.cpp;drc=b0193ccac5b8399f9b5ef270d102b5a50f9446ab;l=2137
        for (i in 0..800) {
            val parcel = Parcel.obtain()
            parcel.writeInt(0x2)
            val byte2 = "hh".toByteArray()
            val bytes = byteArrayOf(
                i.toByte(), i.toByte(),
                i.toByte(), i.toByte()
            )
            parcel.writeByteArray(bytes)
            parcel.setDataPosition(0)
            val strings = parcel.readString()
            //assertNotNull("Tried <" + bytes.toHexString() + ">", strings)
            // assertTrue(strings!!.isNotEmpty())
            Log.d("BinderParcelExploit", "String size <" + strings?.length + ">")
            Log.d("BinderParcelExploit", "Tried <" + bytes.toHexString() + "> <" + bytes.size + ">")
            Log.d("BinderParcelExploit", "Tried <" + byte2.toHexString() + "> <" + byte2.size + ">")

        }

    }

    @Test
    fun readStrongBinder() {
        // https://cs.android.com/android/platform/superproject/+/master:frameworks/native/libs/binder/Parcel.cpp;drc=b0193ccac5b8399f9b5ef270d102b5a50f9446ab;l=2424
        val parcel = Parcel.obtain()
        parcel.writeInt(0xfffffff)
        parcel.setDataPosition(0)
        val strings = parcel.readStrongBinder()
        assertNotNull(strings)
        Log.d("BinderParcelExploit", "String size <$strings>")

    }
}